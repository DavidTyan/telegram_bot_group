import logging
import random
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

TOKEN = "8080770352:AAHfjk_S9BrdKb6PnEd9pu1R4u54gin_dUQ"

logging.basicConfig(level=logging.INFO)

user_balances = {}
group_data = {}       # chat_id: {"nickname": str, "members": set(), "creator": user_id}
user_ranks = {}       # chat_id: {user_id: rank}
banned_users = {}     # chat_id: set(user_id)
admin_sessions = {}   # user_id: {"state": str, "current_group": chat_id}
muted_users = {}      # chat_id: {user_id: mute_end_datetime}


# ---------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ ----------
def check_access(chat_id, user_id):
    return user_id not in banned_users.get(chat_id, set())

def check_mute(chat_id, user_id):
    end_time = muted_users.get(chat_id, {}).get(user_id)
    if not end_time:
        return False
    return datetime.now() < end_time


# ---------- /start ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    chat_id = chat.id
    user_id = update.effective_user.id

    if chat.type == "private":
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö. "
            "–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã."
        )
        return

    if chat_id not in group_data or "nickname" not in group_data[chat_id]:
        await update.message.reply_text(
            "‚ö† –£ –≥—Ä—É–ø–ø—ã –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏–∫–∞.\n"
            "–ó–∞–¥–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:\n"
            "/setchatnick <–Ω–∏–∫>"
        )
        return

    group_data[chat_id]["members"].add(user_id)

    if not check_access(chat_id, user_id):
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É!")
        return

    if check_mute(chat_id, user_id):
        await update.message.reply_text("üîá –¢—ã —Å–µ–π—á–∞—Å –≤ –º—É—Ç–µ –∏ –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã!")
        return

    await update.message.reply_text(
        f"‚úÖ –ì—Ä—É–ø–ø–∞ ¬´{group_data[chat_id]['nickname']}¬ª –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üé∞ /depnut ‚Äî –¥–µ–ø–Ω—É—Ç—å (–∫–∞–∑–∏–Ω–æ)\n"
        "üí∞ /balans ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "üéÅ /bonus ‚Äî –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å (—Ä–∞–∑ –≤ 10—á)\n"
        "üè∑ /setchatnick ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –≥—Ä—É–ø–ø—ã\n"
        "‚öô /action ‚Äî (—Ç–æ–ª—å–∫–æ –ø–æ reply)\n"
        "üèÖ /rangs ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–Ω–≥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    )


# ---------- /setchatnick ----------
async def setchatnick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    chat_id = chat.id
    user_id = update.effective_user.id

    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /setchatnick <–Ω–∏–∫>")
        return

    nickname = context.args[0]

    if nickname in [g.get("nickname") for g in group_data.values()]:
        await update.message.reply_text("–¢–∞–∫–æ–π –Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π!")
        return

    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–æ–≤–∞—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
    if chat_id not in group_data:
        group_data[chat_id] = {"nickname": nickname, "members": set(), "creator": user_id}
        user_ranks[chat_id] = {user_id: 3}  # —Å–æ–∑–¥–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 3-–π —Ä–∞–Ω–≥
    else:
        # –ï—Å–ª–∏ —É–∂–µ –±—ã–ª –Ω–∏–∫, –Ω–µ –º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
        group_data[chat_id]["nickname"] = nickname

    banned_users.setdefault(chat_id, set())
    await update.message.reply_text(f"‚úÖ –ù–∏–∫ –≥—Ä—É–ø–ø—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {nickname}\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!")


# ---------- /depnut ----------
async def depnut(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if chat_id not in group_data or "nickname" not in group_data[chat_id]:
        await update.message.reply_text("‚ö† –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∏–∫ –≥—Ä—É–ø–ø—ã")
        return

    if not check_access(chat_id, user_id):
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É!")
        return

    if check_mute(chat_id, user_id):
        await update.message.reply_text("üîá –¢—ã —Å–µ–π—á–∞—Å –≤ –º—É—Ç–µ –∏ –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã!")
        return

    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /depnut <—Å—É–º–º–∞> –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–µ–ø–Ω—É—Ç–∞ –¥—Ä—É–≥–æ–≥–æ")
        return

    target_id = None
    if update.message.reply_to_message:
        target_id = update.message.reply_to_message.from_user.id
        user_rank = user_ranks.get(chat_id, {}).get(user_id, 0)
        target_rank = user_ranks.get(chat_id, {}).get(target_id, 0)
        if user_rank < target_rank:
            await update.message.reply_text("‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –¥–µ–ø–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º —Ä–∞–Ω–≥–æ–º!")
            return

    bet = context.args[0]
    try:
        bet = int(bet)
    except ValueError:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ: /depnut 1000")
        return

    balance = user_balances.get(user_id, 10000)
    if bet > balance:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return

    won = random.choice([True, False])
    if target_id and not won:
        # –ø—Ä–æ–∏–≥—Ä—ã—à –ø—Ä–∏ –¥–µ–ø–Ω—É—Ç–µ
        muted_users.setdefault(chat_id, {})[target_id] = datetime.now() + timedelta(hours=1)
        await update.message.reply_text(f"üíÄ –¢—ã –¥–µ–ø–Ω—É–ª –∏ –ø—Ä–æ—ë–±–∞–ª {update.message.reply_to_message.from_user.full_name}! –ú—É—Ç 1 —á–∞—Å.")
    elif target_id and won:
        balance += bet
        await update.message.reply_text(f"üéâ –ü–æ–±–µ–¥–∞! –¢—ã –¥–µ–ø–Ω—É–ª {update.message.reply_to_message.from_user.full_name} –∏ –≤—ã–∏–≥—Ä–∞–ª {bet} USK! –ë–∞–ª–∞–Ω—Å: {balance}")
    else:
        if won:
            balance += bet
            await update.message.reply_text(f"üéâ –ü–æ–±–µ–¥–∞! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {balance} USK")
        else:
            balance -= bet
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à... –û—Å—Ç–∞–ª–æ—Å—å {balance} USK")
    user_balances[user_id] = balance


# ---------- /balans ----------
async def balans(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if not check_access(chat_id, user_id):
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É!")
        return
    balance = user_balances.get(user_id, 10000)
    await update.message.reply_text(f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} USK")


# ---------- /bonus ----------
async def bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if not check_access(chat_id, user_id):
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É!")
        return

    balance = user_balances.get(user_id, 10000) + 10000
    user_balances[user_id] = balance
    await update.message.reply_text(f"üéÅ –ë–æ–Ω—É—Å +10000 USK! –ë–∞–ª–∞–Ω—Å: {balance}")


# ---------- /rangs ----------
async def rangs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    members = group_data.get(chat_id, {}).get("members", set())
    if not members:
        await update.message.reply_text("‚ùå –í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return
    text = "üèÖ –†–∞–Ω–≥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
    for m in members:
        rank = user_ranks.get(chat_id, {}).get(m, 0)
        text += f"{m}: {rank}\n"
    await update.message.reply_text(text)


# ---------- /action ----------
async def action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if chat_id not in group_data or "nickname" not in group_data[chat_id]:
        await update.message.reply_text("‚ö† –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∏–∫ –≥—Ä—É–ø–ø—ã")
        return
    if not check_access(chat_id, user_id):
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É!")
        return
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ö† –ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    keyboard = [
        [InlineKeyboardButton("üîá –ú—É—Ç", callback_data="mute_"+str(update.message.reply_to_message.from_user.id)),
         InlineKeyboardButton("üîä –†–∞–∑–º—É—Ç", callback_data="unmute_"+str(update.message.reply_to_message.from_user.id))],
        [InlineKeyboardButton("‚õî –ö–∏–∫", callback_data="kick_"+str(update.message.reply_to_message.from_user.id)),
         InlineKeyboardButton("üö´ –ë–∞–Ω", callback_data="ban_"+str(update.message.reply_to_message.from_user.id))]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))


# ---------- Callback –∫–Ω–æ–ø–æ–∫ ----------
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("_")
    action = data[0]
    target_id = int(data[1])
    chat_id = query.message.chat.id

    if action == "ban":
        banned_users.setdefault(chat_id, set()).add(target_id)
        await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω ‚úÖ")
    elif action == "unmute":
        if chat_id in muted_users and target_id in muted_users[chat_id]:
            del muted_users[chat_id][target_id]
        await query.edit_message_text("–†–∞–∑–º—É—Ç ‚úÖ")
    elif action == "mute":
        muted_users.setdefault(chat_id, {})[target_id] = datetime.now() + timedelta(hours=1)
        await query.edit_message_text("–ú—É—Ç ‚úÖ")
    elif action == "kick":
        await query.edit_message_text("–ö–∏–∫ ‚úÖ")
    elif action == "logout":
        user_id = query.from_user.id
        if user_id in admin_sessions:
            del admin_sessions[user_id]
        await query.edit_message_text("‚úÖ –í—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")


# ---------- –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∫–æ–º–∞–Ω–¥ ----------
async def set_commands(application):
    await application.bot.set_my_commands([
        ("start", "üöÄ –ù–∞—á–∞–ª–æ"),
        ("depnut", "üé∞ –î–µ–ø–Ω—É—Ç—å"),
        ("balans", "üí∞ –ë–∞–ª–∞–Ω—Å"),
        ("bonus", "üéÅ –ë–æ–Ω—É—Å"),
        ("setchatnick", "üè∑ –ù–∏–∫ –≥—Ä—É–ø–ø—ã"),
        ("login", "üîë –í—Ö–æ–¥"),
        ("action", "‚öô –î–µ–π—Å—Ç–≤–∏—è (–ø–æ reply)"),
        ("rangs", "üèÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–Ω–≥–∏")
    ])


# ---------- Main ----------
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("depnut", depnut))
    app.add_handler(CommandHandler("balans", balans))
    app.add_handler(CommandHandler("bonus", bonus))
    app.add_handler(CommandHandler("setchatnick", setchatnick))
    app.add_handler(CommandHandler("action", action))
    app.add_handler(CommandHandler("rangs", rangs))
    app.add_handler(CallbackQueryHandler(button))
    app.post_init = lambda _: set_commands(app)
    app.run_polling()


if __name__ == "__main__":
    main()
